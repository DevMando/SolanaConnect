@inject IJSRuntime JS

<h3>Connect Your Phantom Wallet</h3>

@if (!string.IsNullOrEmpty(WalletAddress))
{
    <p><strong>Connected Wallet:</strong> @WalletAddress</p>
    <RadzenButton Click="() => DisconnectWallet()">Disconnect</RadzenButton>
}
else
{
    <RadzenButton Click="() => ConnectWallet()">Connect Wallet</RadzenButton>
}

@code {
    private string WalletAddress = string.Empty;

    public async Task ConnectWallet()
    {
        try
        {
            WalletAddress = await JS.InvokeAsync<string>("phantomWallet.connect");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to Phantom Wallet: {ex.Message}");
        }
    }

    private async Task DisconnectWallet()
    {
        try
        {
            bool result = await JS.InvokeAsync<bool>("phantomWallet.disconnect");
            if (result)
            {
                WalletAddress = string.Empty;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disconnecting from Phantom Wallet: {ex.Message}");
        }
    }
}
